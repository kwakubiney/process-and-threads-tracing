// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadProcess_and_thread_exec returns the embedded CollectionSpec for process_and_thread_exec.
func loadProcess_and_thread_exec() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_Process_and_thread_execBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load process_and_thread_exec: %w", err)
	}

	return spec, err
}

// loadProcess_and_thread_execObjects loads process_and_thread_exec and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*process_and_thread_execObjects
//	*process_and_thread_execPrograms
//	*process_and_thread_execMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadProcess_and_thread_execObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadProcess_and_thread_exec()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// process_and_thread_execSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type process_and_thread_execSpecs struct {
	process_and_thread_execProgramSpecs
	process_and_thread_execMapSpecs
}

// process_and_thread_execSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type process_and_thread_execProgramSpecs struct {
	DetectNewProcess *ebpf.ProgramSpec `ebpf:"detect_new_process"`
}

// process_and_thread_execMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type process_and_thread_execMapSpecs struct {
}

// process_and_thread_execObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadProcess_and_thread_execObjects or ebpf.CollectionSpec.LoadAndAssign.
type process_and_thread_execObjects struct {
	process_and_thread_execPrograms
	process_and_thread_execMaps
}

func (o *process_and_thread_execObjects) Close() error {
	return _Process_and_thread_execClose(
		&o.process_and_thread_execPrograms,
		&o.process_and_thread_execMaps,
	)
}

// process_and_thread_execMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadProcess_and_thread_execObjects or ebpf.CollectionSpec.LoadAndAssign.
type process_and_thread_execMaps struct {
}

func (m *process_and_thread_execMaps) Close() error {
	return _Process_and_thread_execClose()
}

// process_and_thread_execPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadProcess_and_thread_execObjects or ebpf.CollectionSpec.LoadAndAssign.
type process_and_thread_execPrograms struct {
	DetectNewProcess *ebpf.Program `ebpf:"detect_new_process"`
}

func (p *process_and_thread_execPrograms) Close() error {
	return _Process_and_thread_execClose(
		p.DetectNewProcess,
	)
}

func _Process_and_thread_execClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed process_and_thread_exec_x86_bpfel.o
var _Process_and_thread_execBytes []byte
